type User {
  user_id: ID!
  username: String!
  email: String!
  level_name: String!
  created_at: String!
}
type Query {
  users: [User]
  user(user_id: ID!): User
  friends: [User]
  pendingFriends: [User]
}
type UserResponse {
  user: User!
  message: String!
}
type UserWithOnlyID {
  user_id: ID!
}
type FriendshipResponse {
  user: UserWithOnlyID!
  message: String!
}
input UserInput {
  username: String! @constraint(minLength: 3, maxLength: 255)
  email: String! @constraint(format: "email")
  password: String! @constraint(pattern: "(?=.*[0-9])")
}
type LoginResponse {
  user: User!
  token: String!
  message: String!
}
input friendId {
  friend_id: ID!
}
type Mutation {
  createUser(input: UserInput!): UserResponse
  login(username: String!, password: String!): LoginResponse
  sendFriendRequest(input: friendId!): FriendshipResponse
  acceptFriendRequest(input: friendId!): UserResponse
  deleteFriend(input: friendId!): FriendshipResponse
}
